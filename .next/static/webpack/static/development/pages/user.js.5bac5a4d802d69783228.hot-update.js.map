{"version":3,"file":"static/webpack/static/development/pages/user.js.5bac5a4d802d69783228.hot-update.js","sources":["webpack:///./pages/user.js"],"sourcesContent":["import React, { Component } from 'react';\nimport GhPolyglot from 'gh-polyglot';\nimport Chart from 'chart.js';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { user, repos, languages } from '../data';\n\nconst StyledContainer = styled.main`\n  padding: 50px 100px;\n  img {\n    max-width: 200px;\n  }\n  .chart {\n    max-width: 500px;\n  }\n`;\n\nclass User extends Component {\n  state = {\n    username: '',\n    user: {},\n    userLanguages: [],\n    chartType: 'bar',\n    repos,\n  };\n\n  componentDidMount() {\n    this.setState({ username: this.props.query.id });\n    const username = this.props.query.id;\n\n    // fetch(`https://api.github.com/users/${username}`)\n    //   .then(response => response.json())\n    //   .then(json => {\n    //     console.log(json);\n    //     setUser(json);\n    //   });\n    this.setState({ user });\n\n    // const me = new GhPolyglot(`${username}`);\n    // me.userStats((err, stats) => {\n    //   if (err) {\n    //     throw new Error(err);\n    //   }\n\n    //   this.setState({ userLanguages: stats }, () => this.buildChart());\n    // });\n    this.buildChart();\n\n    this.getTopRepos();\n  }\n\n  buildChart = () => {\n    const { userLanguages, chartType } = this.state;\n    const ctx = document.getElementById('langChart');\n\n    window.mychart = new Chart(ctx, {\n      type: chartType,\n      data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [\n          {\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.2)',\n              'rgba(54, 162, 235, 0.2)',\n              'rgba(255, 206, 86, 0.2)',\n              'rgba(75, 192, 192, 0.2)',\n              'rgba(153, 102, 255, 0.2)',\n              'rgba(255, 159, 64, 0.2)',\n            ],\n            borderColor: [\n              'rgba(255, 99, 132, 1)',\n              'rgba(54, 162, 235, 1)',\n              'rgba(255, 206, 86, 1)',\n              'rgba(75, 192, 192, 1)',\n              'rgba(153, 102, 255, 1)',\n              'rgba(255, 159, 64, 1)',\n            ],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n        },\n      },\n    });\n  };\n\n  changeChartType = e => {\n    window.mychart.destroy();\n    this.setState({ chartType: e.target.value }, () => this.buildChart());\n  };\n\n  getTopRepos = () => {\n    const { repos } = this.state;\n    const topFive = repos.sort((a, b) => b.stargazers_count - a.stargazers_count).slice(0, 5);\n    this.setState({ topRepos: topFive });\n  };\n\n  render() {\n    const { username, user, topRepos } = this.state;\n    console.log(topRepos);\n\n    return (\n      <StyledContainer>\n        <h1>\n          <a href={user.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {username}\n          </a>\n        </h1>\n        <h2>{user.name}</h2>\n        <h3>{user.company}</h3>\n        <p>{user.blog}</p>\n        <p>{user.location}</p>\n        <p>{user.email}</p>\n        <p>{user.hireable ? 'Hireable' : 'Not Available'}</p>\n        <p>{user.bio}</p>\n        <p>Repos: {user.public_repos}</p>\n        <p>Followers: {user.followers}</p>\n        <p>Following: {user.following}</p>\n        <p>\n          Member since &nbsp;\n          {new Date(user.created_at).toLocaleDateString('en-US', {\n            month: 'short',\n            year: 'numeric',\n          })}\n        </p>\n\n        <img src={user.avatar_url} alt=\"\" />\n\n        {/* eslint-disable-next-line */}\n        <select name=\"chartType\" id=\"chartType\" onChange={this.changeChartType}>\n          <option value=\"bar\">Bar</option>\n          <option value=\"polarArea\">Polar Area</option>\n          <option value=\"doughnut\">Doughnut</option>\n          <option value=\"pie\">Pie</option>\n        </select>\n\n        <canvas id=\"langChart\" className=\"chart\" width=\"400\" height=\"400\" />\n\n        <h2>Top 5 Repos by stars</h2>\n        <ul>\n          {topRepos &&\n            topRepos.map(repo => (\n              <li key={repo.id}>\n                <a href={repo.html_url}>\n                  <h3>{repo.name}</h3>\n                  <p>{repo.description}</p>\n                  <p>{repo.homepage}</p>\n                  <p>{repo.stargazers_count} stars</p>\n                  <p>{repo.forks} forks</p>\n                  <p>Top Language: {repo.language}</p>\n                </a>\n              </li>\n            ))}\n        </ul>\n      </StyledContainer>\n    );\n  }\n}\n\nUser.propTypes = {\n  query: PropTypes.object,\n};\n\nexport default User;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AASA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAgCA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AAQA;AAnBA;AAHA;AA0BA;AACA;AACA;AAEA;AACA;AADA;AADA;AAFA;AADA;AA5BA;AAwCA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AAjeA;;;;AAtJA;AACA;AAwJA;AACA;AADA;AAIA;;;;A","sourceRoot":""}